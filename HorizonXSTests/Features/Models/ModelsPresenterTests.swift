//
//  ModelsPresenterTests.swift
//  HorizonXS
//
//  Created by Carlos Jimenez on 9/21/19.
//  Copyright (c) 2019 Carlos Jimenez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import HorizonXS
import XCTest

// swiftlint:disable all
class ModelsPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: ModelsPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupModelsPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupModelsPresenter() {
        sut = ModelsPresenter()
    }

    // MARK: Tests
    func testPresentManufacturers() {
        // Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy
        let response = Models.Response(hasMoreElements: false, models: [CarModel(id: "i3", name: "i3"), CarModel(id: "Z8", name: "Z8")])

        // When
        sut.presentModels(response: response)

        // Then
        XCTAssertTrue(spy.displayModelsCalled)
        XCTAssertNotNil(spy.viewModel)
    }

    func testPresentManufacturersEmpty() {
        // Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy
        let response = Models.Response(hasMoreElements: false, models: [])

        // When
        sut.presentModels(response: response)

        // Then
        XCTAssertTrue(spy.displayModelsCalled)
    }

    func testPresentModel() {
        //Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy

        //When
        sut.presentModel()

        //Then
        XCTAssertTrue(spy.showModelCalled)
    }

    func testPresentLoading() {
        //Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy

        //When
        sut.presentLoading()

        //Then
        XCTAssertTrue(spy.displayLoadingCalled)
    }

    func testHideLoading() {
        //Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy
        sut.isLoading = true

        //When
        sut.hideLoading()

        //Then
        XCTAssertTrue(spy.hideLoadingCalled)
    }

    func testPresentError() {
        //Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy

        //When
        sut.presentError(msg: "ERROR")

        //Then
        XCTAssertTrue(spy.displayErrorCalled)
    }

    func testHideError() {
        //Given
        let spy = ModelsDisplayLogicSpy()
        sut.viewController = spy
        sut.hasError = true

        //When
        sut.hideError()

        //Then
        XCTAssertTrue(spy.hideErrorCalled)
    }

    
}

class ModelsDisplayLogicSpy: ModelsDisplayLogic {

    var viewModel: Models.ViewModel?

    var displayModelsCalled = false
    func displayModels(viewModel: Models.ViewModel) {
        self.viewModel = viewModel
        displayModelsCalled = true
    }

    var displayLoadingCalled = false
    func displayLoading() {
        displayLoadingCalled = true
    }

    var hideLoadingCalled = false
    func hideLoading() {
        hideLoadingCalled = true
    }

    var displayErrorCalled = false
    func displayError(msg: String) {
        displayErrorCalled = true
    }

    var hideErrorCalled = false
    func hideError() {
        hideErrorCalled = true
    }

    var showModelCalled = true
    func showModel() {
        showModelCalled = true
    }

}
